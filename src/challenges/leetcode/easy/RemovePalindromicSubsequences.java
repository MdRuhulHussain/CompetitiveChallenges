package challenges.leetcode.easy;

/*
 * You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one 
 * palindromic subsequence from s. Return the minimum number of steps to make the given string empty. A string
 * is a subsequence of a given string if it is generated by deleting some characters of a given string 
 * without changing its order. Note that a subsequence does not necessarily need to be contiguous.
 * Example : Input s = "ababa". Output = 1 (=> ababa itself is palindrom)
 * Input s = "abb". Output = 2 (=> bb => a 
 */
public class RemovePalindromicSubsequences {
	
	public static void main(String args[]) {
		String s = "baabb";
		System.out.println(removePalindromeSub(s));
	}
	
	public static int removePalindromeSub(String s) {
        if(isPalindrome(s))
            return 1;
        return 2;
    }

    public static boolean isPalindrome(String s){
        int i=0, j = s.length()-1;
        while(i<j){
            if(s.charAt(i)!=s.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }

}
